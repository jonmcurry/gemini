"""Modify claims table for encrypted fields

Revision ID: 8b9c0d1e2f3a
Revises: 7a8b9c0d1e2f
Create Date: 2024-04-01 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # For existing type in downgrade if needed

# revision identifiers, used by Alembic.
revision = '8b9c0d1e2f3a'
down_revision = '7a8b9c0d1e2f' # Points to the migration that created failed_claims table (Subtask 51)
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Note: medical_record_number was already added to the model in a previous step
    # and should have its own migration if strictly following Alembic's autogen for each model change.
    # However, the plan combines its ensured presence (or addition) with the type change for patient_date_of_birth.
    # If 'medical_record_number' column doesn't exist, this will add it.
    # If it exists but this is re-run, add_column might fail or do nothing depending on DB/Alembic context.
    # For safety, it's often better to check if a column exists.
    # However, typical Alembic scripts assume they run once.

    # Check if medical_record_number column exists. This is a more robust way if script could run multiple times
    # or if model changes and migration generation are not perfectly in sync.
    # For this subtask, following the plan to add it here.

    op.add_column('claims',
                  sa.Column('medical_record_number', sa.String(length=150), nullable=True)
    )
    op.create_index(op.f('ix_claims_medical_record_number'), 'claims', ['medical_record_number'], unique=False)

    op.alter_column('claims',
                    'patient_date_of_birth',
                    existing_type=sa.Date(), # Original type
                    type_=sa.String(length=255),
                    nullable=True) # Keep nullable consistent with model
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('claims',
                    'patient_date_of_birth',
                    existing_type=sa.String(length=255),
                    type_=sa.Date(),
                    nullable=True,
                    # For PostgreSQL, to cast string back to date:
                    # postgresql_using='patient_date_of_birth::date'
                    # This assumes data in string column is valid date string.
                    # If not, this downgrade might fail or lead to data issues.
                   )
                   # For other DBs, the cast method might differ or not be needed.

    op.drop_index(op.f('ix_claims_medical_record_number'), table_name='claims')
    op.drop_column('claims', 'medical_record_number')
    # ### end Alembic commands ###
